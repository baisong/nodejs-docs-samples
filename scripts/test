#!/usr/bin/env node

/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

require('colors');

const fs = require('fs');
const path = require('path');

require('shelljs/global');

let dryRun = false;

process.argv.forEach((arg) => {
  if (arg === '--dry-run') {
    dryRun = true;
  }
});

const rootDir = path.join(__dirname, '..');

if (process.env.CIRCLE_BRANCH === 'master') {
  const result = exec('yarn run all-cover', { cwd: rootDir });

  if (result.code !== 0) {
    process.exit(1);
  }
} else {
  if (!dryRun) {
    const result = exec('yarn run lint', { cwd: rootDir });
    if (result.code !== 0) {
      process.exit(1);
    }
  }

  // Get list of changed files
  const changedFiles = exec('git diff-tree --no-commit-id --name-status -r HEAD', { silent: true }).stdout.split('\n')
    .filter((line) => line)
    .filter((line) => !line.startsWith('D'));

  console.log('Changed files:'.bold);
  changedFiles.forEach((file) => console.log(file));

  // Get list of directories that have tests
  const testDirs = getDirs(rootDir)
    .map((name) => name.replace(`${rootDir}/`, ''))
    .filter((name) => name.endsWith('/test') || name.endsWith('/system-test'));

  console.log('\nDirectories that contain tests:'.bold);
  testDirs.forEach((file) => {
    console.log(`  - ${file}`);
  });

  // Find intersection between changed files and test directories
  const affectedTestsNames = {};
  changedFiles.forEach((name) => {
    testDirs.forEach((dir) => {
      const codeDir = `${dir.replace('/test', '').replace('/system-test', '')}/`;

      if (name.includes(codeDir)) {
        affectedTestsNames[dir] = true;
      }
    });
  });

  // Get final names of tests that need to be run
  const affectedTests = Object.keys(affectedTestsNames)
    .map((name) => `${name}/*.test.js`);

  console.log('\nAffected tests:'.bold);
  affectedTests.forEach((file) => {
    console.log(`  - ${file}`);
  });

  if (affectedTests.length) {
    // Run the affected tests
    const cmd = `yarn run ci-test -- '${affectedTests.join('\' \'')}'`;
    console.log('\nTest command'.bold);
    console.log(`\n${cmd}`);

    if (!dryRun) {
      const result = exec(cmd, { cwd: rootDir });
      if (result.code !== 0) {
        process.exit(1);
      }
    }
  } else {
    console.log('No tests to run...');
  }
}

function getDirs (_path) {
  const dirs = fs.readdirSync(_path)
    .filter((name) => !name.includes('.'))
    .filter((name) => !name.includes('node_modules'))
    .filter((name) => !name.includes('bower_components'))
    .map((name) => path.join(_path, name))
    .filter((name) => fs.statSync(name).isDirectory());

  if (!dirs.length) {
    return [_path];
  }

  return dirs
    .reduce((cur, name) => cur.concat(getDirs(name)), []);
}
